local aa_state_types = { "Global", "Run", "Slow walk", "In air", "On-Key" }

local ref = {
    pitch = ui.reference("AA", "Anti-aimbot angles", "Pitch"),
    yaw_base = ui.reference("AA", "Anti-aimbot angles", "Yaw base"),
    yaw = { ui.reference("AA", "Anti-aimbot angles", "Yaw") },
    yaw_jitter = { ui.reference("AA", "Anti-aimbot angles", "Yaw jitter") },
    body_yaw = { ui.reference("AA", "Anti-aimbot angles", "Body yaw") },
    freestanding_body_yaw = ui.reference("AA", "Anti-aimbot angles", "Freestanding body yaw"),
    fake_yaw_limit = ui.reference("AA", "Anti-aimbot angles", "Fake yaw limit"),
    edge_yaw = ui.reference("AA", "Anti-aimbot angles", "Edge yaw"),
    freestanding = ui.reference("AA", "Anti-aimbot angles", "Freestanding"),
    slow_walk = { ui.reference("AA", "Other", "Slow motion") },
    leg_movement = ui.reference("AA", "Other", "Leg movement")
}

local function show_origin(value)
    ui.set_visible(ref.pitch, value)
    ui.set_visible(ref.yaw_base, value)
    ui.set_visible(ref.yaw[1], value)
    ui.set_visible(ref.yaw[2], value)
    ui.set_visible(ref.yaw_jitter[1], value)
    ui.set_visible(ref.yaw_jitter[2], value)
    ui.set_visible(ref.body_yaw[1], value)
    ui.set_visible(ref.body_yaw[2], value)
    ui.set_visible(ref.freestanding_body_yaw, value)
    ui.set_visible(ref.fake_yaw_limit, value)
    ui.set_visible(ref.edge_yaw, value)
    ui.set_visible(ref.freestanding, value)
end

local KZVars = {
    last_aa_state = 0,
    last_flip = false,
    last_press_t = 0,
    last_yaw_forward = false,
    last_yaw_backward = false,
    last_yaw_right = false,
    last_yaw_left = false,
    manual_yaw = 0,
    best_body_yaw = 180,
    a_b_force_info = {},
    should_show = false
}

local aa_mode_selection = ui.new_combobox("AA", "Anti-aimbot angles", "AA mode", aa_state_types)

local KZMenus = {}
for i = 1, #aa_state_types do
    KZMenus[i] = {
        enable = ui.new_checkbox("AA", "Anti-aimbot angles", "[" .. aa_state_types[i] .. "] " .. "Enable"),
        pitch = ui.new_combobox("AA", "Anti-aimbot angles", "[" .. aa_state_types[i] .. "] " .. "Pitch", { "Off", "Default", "Up", "Down", "Minimal", "Random" }),
        yaw_base = ui.new_combobox("AA", "Anti-aimbot angles", "[" .. aa_state_types[i] .. "] " .. "Yaw base", { "Local view", "At targets" }),
        yaw = ui.new_combobox("AA", "Anti-aimbot angles", "[" .. aa_state_types[i] .. "] " .. "Yaw", { "Off", "180", "Spin", "Static", "180 Z", "Crosshair" }),
        yaw_degree = ui.new_slider("AA", "Anti-aimbot angles", "[" .. aa_state_types[i] .. "] Yaw degree", -180, 180, 0, true),
        yaw_jitter = ui.new_combobox("AA", "Anti-aimbot angles", "[" .. aa_state_types[i] .. "] " .. "Yaw jitter", { "Off", "Offset", "Center", "Random" }),
        yaw_jitter_degree = ui.new_slider("AA", "Anti-aimbot angles", "[" .. aa_state_types[i] .. "] Yaw jitter degree", -180, 180, 0, true),
        body_yaw = ui.new_combobox("AA", "Anti-aimbot angles", "[" .. aa_state_types[i] .. "] " .. "Body yaw", { "Off", "Opposite", "Jitter", "Static" }),
        body_yaw_settings = ui.new_multiselect("AA", "Anti-aimbot angles", "[" .. aa_state_types[i] .. "] " .. "Body yaw addition", { "Jitter when safe", "Anti-resolver:Hit", "Anti-resolver:Miss" }),
        fake_yaw_limit = ui.new_slider("AA", "Anti-aimbot angles", "[" .. aa_state_types[i] .. "] " .. "Fake yaw limit", 0, 60, 0, true),
        fake_yaw_limit_jitter = ui.new_combobox("AA", "Anti-aimbot angles", "[" .. aa_state_types[i] .. "] " .. "Fake yaw limit jitter", { "Off", "Random" }),
        fake_yaw_limit_jitter_degree = ui.new_slider("AA", "Anti-aimbot angles", "[" .. aa_state_types[i] .. "] " .. "Fake yaw limit jitter degree", 0, 60, 0, true)
    }
end

local better_leg_movement = ui.new_checkbox("AA", "Anti-aimbot angles", "Better leg movement")
local body_yaw_inverter = ui.new_hotkey("AA", "Anti-aimbot angles", "Body yaw inverter")
local manual_left = ui.new_hotkey("AA", "Anti-aimbot angles", "Manual left")
local manual_right = ui.new_hotkey("AA", "Anti-aimbot angles", "Manual right")
local manual_back = ui.new_hotkey("AA", "Anti-aimbot angles", "Manual back")
local manual_forward = ui.new_hotkey("AA", "Anti-aimbot angles", "Manual forward")
local onKeyAA = ui.new_hotkey("AA", "Anti-aimbot angles", "Custom on key")
local body_yaw_indicator = ui.new_combobox("AA", "Anti-aimbot angles", "Anti aim indicator", { "Off", "Circle" })
ui.new_label("AA", "Anti-aimbot angles", "Fake body yaw color")
local FakeAngleColor = ui.new_color_picker("AA", "Anti-aimbot angles", "Fake body yaw color", 255, 255, 255, 255)
ui.new_label("AA", "Anti-aimbot angles", "Real body yaw color")
local RealAngleColor = ui.new_color_picker("AA", "Anti-aimbot angles", "Real body yaw color", 255, 255, 0, 255)
local ManualYawIndicator = ui.new_combobox("AA", "Anti-aimbot angles", "Anti aim indicator", { "Off", "Arrow" })
ui.new_label("AA", "Anti-aimbot angles", "Manual yaw color")
local ManualYawColor = ui.new_color_picker("AA", "Anti-aimbot angles", "Manual yaw color", 255, 255, 255, 255)

local function handle_menu()
    for i = 1, #aa_state_types do
        ui.set_visible(KZMenus[i].enable, ui.get(aa_mode_selection) == aa_state_types[i])

        local show = ui.get(aa_mode_selection) == aa_state_types[i] and ui.get(KZMenus[i].enable)
        ui.set_visible(KZMenus[i].pitch, show)
        ui.set_visible(KZMenus[i].yaw_base, show)
        ui.set_visible(KZMenus[i].yaw, show)
        ui.set_visible(KZMenus[i].yaw_degree, show)
        ui.set_visible(KZMenus[i].yaw_jitter, show)
        ui.set_visible(KZMenus[i].yaw_jitter_degree, show)
        ui.set_visible(KZMenus[i].body_yaw, show)
        ui.set_visible(KZMenus[i].body_yaw_settings, show)
        ui.set_visible(KZMenus[i].fake_yaw_limit, show)
        ui.set_visible(KZMenus[i].fake_yaw_limit_jitter, show)
        ui.set_visible(KZMenus[i].fake_yaw_limit_jitter_degree, show)
    end
end

local function table_contain(tab, val)
    for index, value in ipairs(tab) do
        if value == val then
            return true
        end
    end

    return false
end

local local_player = {

    is_unsafe_head = function()
        for index, value in pairs(entity.get_players(true)) do
            local enemy_x, enemy_y, enemy_z = entity.get_prop(value, "m_vecOrigin")
            local head_x, head_y, head_z = entity.hitbox_position(entity.get_local_player(), 0)
            local ent, damage = client.trace_bullet(value, enemy_x, enemy_y, enemy_z + 70, head_x, head_y, head_z, true)
            if damage > 0 then
                return true
            end
        end
        return false
    end,
    get_closest_ent = function()
        local closestEnt = nil
        local closeDis = 999999
        local enemies = entity.get_players(true)
        for index, value in pairs(enemies) do
            local ent_l = { entity.get_origin(value) }
            local local_l = { entity.get_origin(entity.get_local_player()) }

            local function vector3d(A, B)
                return math.sqrt((A[1] - B[1]) ^ 2 + (A[2] - B[2]) ^ 2 + (A[3] - B[3]) ^ 2)
            end

            local dist = vector3d(ent_l, local_l)
            if dist < closeDis then
                closestEnt = value
                closeDis = dist
            end
        end

        return closestEnt
    end
}

local set_config = {
    set_pitch = function()
        ui.set(ref.pitch, ui.get(KZMenus[KZVars.last_aa_state].pitch))
    end,
    set_yaw_base = function()
        ui.set(ref.yaw_base, ui.get(KZMenus[KZVars.last_aa_state].yaw_base))
    end,
    set_yaw = function()
        ui.set(ref.yaw[1], ui.get(KZMenus[KZVars.last_aa_state].yaw))

        if KZVars.last_yaw_forward ~= ui.get(manual_forward) then
            KZVars.last_yaw_forward = ui.get(manual_forward)
            KZVars.manual_yaw = 180
        end

        if KZVars.last_yaw_backward ~= ui.get(manual_back) then
            KZVars.last_yaw_backward = ui.get(manual_back)
            KZVars.manual_yaw = 0
        end

        if KZVars.last_yaw_right ~= ui.get(manual_right) then
            KZVars.last_yaw_right = ui.get(manual_right)
            KZVars.manual_yaw = 90
        end

        if KZVars.last_yaw_left ~= ui.get(manual_left) then
            KZVars.last_yaw_left = ui.get(manual_left)
            KZVars.manual_yaw = -90
        end

        ui.set(ref.yaw[2], ui.get(KZMenus[KZVars.last_aa_state].yaw_degree) + KZVars.manual_yaw)
    end,
    yaw_jitter = function()
        ui.set(ref.yaw_jitter[1], ui.get(KZMenus[KZVars.last_aa_state].yaw_jitter))
        ui.set(ref.yaw_jitter[2], ui.get(KZMenus[KZVars.last_aa_state].yaw_jitter_degree))
    end,
    set_body_yaw = function()
        if table_contain(ui.get(KZMenus[KZVars.last_aa_state].body_yaw_settings), "Jitter when safe") and local_player.is_unsafe_head() == false then
            ui.set(ref.body_yaw[1], "Jitter")
        else
            ui.set(ref.body_yaw[1], ui.get(KZMenus[KZVars.last_aa_state].body_yaw))
        end

        if KZVars.last_flip ~= ui.get(body_yaw_inverter) then
            KZVars.last_flip = ui.get(body_yaw_inverter)
            KZVars.best_body_yaw = KZVars.best_body_yaw > 0 and -180 or 180
        end

        if table_contain(ui.get(KZMenus[KZVars.last_aa_state].body_yaw_settings), "Anti-resolver:Hit") or table_contain(ui.get(KZMenus[KZVars.last_aa_state].body_yaw_settings), "Anti-resolver:Miss") then
            local a_b_ = KZVars.a_b_force_info[local_player.get_closest_ent()]
            if a_b_ ~= nil then
                local a_b_body_yaw = KZVars.a_b_force_info[local_player.get_closest_ent()].body_yaw
                if a_b_body_yaw ~= nil then
                    KZVars.best_body_yaw = a_b_body_yaw
                end
            end
        end

        ui.set(ref.body_yaw[2], KZVars.best_body_yaw)
    end,
    fake_yaw_limit = function()
        local final_fake_yaw_limit = ui.get(KZMenus[KZVars.last_aa_state].fake_yaw_limit)

        if ui.get(KZMenus[KZVars.last_aa_state].fake_yaw_limit_jitter) == "Random" then
            local fyl1 = final_fake_yaw_limit - ui.get(KZMenus[KZVars.last_aa_state].fake_yaw_limit_jitter_degree)
            if fyl1 < 0 then
                fyl1 = 0
            end

            local fyl2 = final_fake_yaw_limit + ui.get(KZMenus[KZVars.last_aa_state].fake_yaw_limit_jitter_degree)
            if fyl2 > 60 then
                fyl2 = 60
            end

            final_fake_yaw_limit = math.random(fyl1, fyl2)
        end

        ui.set(ref.fake_yaw_limit, final_fake_yaw_limit)
    end,
    set_leg_movement = function()
        local is_slow_motioning = ui.get(ref.slow_walk[1]) and ui.get(ref.slow_walk[2])
        if ui.get(better_leg_movement) and not is_slow_motioning then
            local legs_types = { "Off", "Always slide", "Never slide" }
            local random_legs = math.random(1, 3)
            ui.set(ref.leg_movement, legs_types[random_legs])
        end
    end
}

local function on_setup_command(cmd)
    if ui.get(KZMenus[1].enable) ~= true then
        return
    end

    KZVars.last_aa_state = 1
    if ui.get(onKeyAA) then
        KZVars.last_aa_state = 5
    elseif cmd.in_jump == 1 then
        if ui.get(KZMenus[4].enable) then
            KZVars.last_aa_state = 4
        end
    elseif ui.get(ref.slow_walk[1]) and ui.get(ref.slow_walk[2]) then
        if ui.get(KZMenus[3].enable) then
            KZVars.last_aa_state = 3
        end
    elseif cmd.forwardmove ~= 0 or cmd.sidemove ~= 0 then
        if ui.get(KZMenus[2].enable) then
            KZVars.last_aa_state = 2
        end
    end

    if ui.get(onKeyAA) then
        if entity.get_classname(entity.get_player_weapon()) == "CC4" then
            if cmd.in_attack == 1 then
                cmd.in_attack = 0
                cmd.in_use = 1
            end
        else
            if cmd.chokedcommands == 0 then
                cmd.in_use = 0
            end
        end
    end

    set_config.set_pitch()
    set_config.set_yaw_base()
    set_config.set_yaw()
    set_config.yaw_jitter()
    set_config.set_body_yaw()
    set_config.fake_yaw_limit()
    set_config.set_leg_movement()
end

local function on_predict_command()
    local is_slow_motioning = ui.get(ref.slow_walk[1]) and ui.get(ref.slow_walk[2])
    if ui.get(better_leg_movement) and not is_slow_motioning then
        entity.set_prop(entity.get_local_player(), "m_flPoseParameter", 8, 0)
    else
        entity.set_prop(entity.get_local_player(), "m_flPoseParameter", 0)
    end
end

local function on_paint()
    local sx, sy = client.screen_size()
    local cx, cy = sx / 2, sy / 2 - 2

    if ui.get(body_yaw_indicator) == "Circle" then

        local function normalize_yaw(yaw)
            while yaw > 180 do
                yaw = yaw - 360
            end
            while yaw < -180 do
                yaw = yaw + 360
            end
            return yaw
        end

        local function calc_angle(local_x, local_y, enemy_x, enemy_y)
            local ydelta = local_y - enemy_y
            local xdelta = local_x - enemy_x
            local relativeyaw = math.atan(ydelta / xdelta)
            relativeyaw = normalize_yaw(relativeyaw * 180 / math.pi)
            if xdelta >= 0 then
                relativeyaw = normalize_yaw(relativeyaw + 180)
            end
            return relativeyaw
        end

        local cam = { client.camera_angles() }

        local h = { entity.hitbox_position(entity.get_local_player(), "head_0") }
        local p = { entity.hitbox_position(entity.get_local_player(), "pelvis") }

        local yaw = normalize_yaw(calc_angle(p[1], p[2], h[1], h[2]) - cam[2] + 120)
        local body_yaw = entity.get_prop(entity.get_local_player(), "m_flPoseParameter", 11) * 120 - 60

        local fake_angle = normalize_yaw(yaw + body_yaw)

        local r, g, b, a = ui.get(FakeAngleColor)
        local r1, g1, b1, a1 = ui.get(RealAngleColor)

        renderer.circle_outline(cx, cy + 1, 100, 100, 100, 100, 30, 0, 1, 4)
        renderer.circle_outline(cx, cy + 1, r, g, b, a, 30, (fake_angle * -1) - 15, 0.1, 4)
        renderer.circle_outline(cx, cy + 1, r1, g1, b1, a1, 30, (yaw * -1) - 15, 0.1, 4)
    end

    if ui.get(ManualYawIndicator) == "Arrow" then
        local cr, cg, cb, ca = ui.get(ManualYawColor)
        renderer.text(cx + 60, cy, cr, cg, cb, KZVars.manual_yaw == 90 and 255 or 100, "c+", 0, ">")
        renderer.text(cx - 60, cy, cr, cg, cb, KZVars.manual_yaw == -90 and 255 or 100, "c+", 0, "<")
        renderer.text(cx, cy + 60, cr, cg, cb, KZVars.manual_yaw == 0 and 255 or 100, "c+", 0, "v")
    end
end

client.set_event_callback("paint", on_paint)
client.set_event_callback("setup_command", on_setup_command)
client.set_event_callback("predict_command", on_predict_command)

client.set_event_callback("paint_ui", function()
    handle_menu()
    show_origin(KZVars.should_show)
end)

local function on_bullet_impact(e)
    local shooter = client.userid_to_entindex(e.userid)

    if not entity.is_enemy(shooter) or not entity.is_alive(entity.get_local_player()) then
        return
    end

    local function dist_from_3dline(shooter, e)
        local x, y, z = entity.hitbox_position(shooter, 0)
        local x1, y1, z1 = client.eye_position()

        return ((e.y - y) * x1 - (e.x - x) * y1 + e.x * y - e.y * x) / math.sqrt((e.y - y) ^ 2 + (e.x - x) ^ 2)
    end

    if table_contain(ui.get(KZMenus[KZVars.last_aa_state].body_yaw_settings), "Anti-resolver:Miss") then
        local d = dist_from_3dline(shooter, e)

        if math.abs(d) < 125 then
            if shooter == local_player.get_closest_ent() then
                KZVars.a_b_force_info[shooter] = {
                    body_yaw = -ui.get(ref.body_yaw[2])
                }
            end
        end
    end
end

client.set_event_callback("bullet_impact", on_bullet_impact)

client.set_event_callback("player_hurt", function(e)
    local victim = client.userid_to_entindex(e.userid)
    local attacker = client.userid_to_entindex(e.attacker)

    if table_contain(ui.get(KZMenus[KZVars.last_aa_state].body_yaw_settings), "Anti-resolver:Hit") then
        if victim == entity.get_local_player() and attacker == local_player.get_closest_ent() then
            if e.hitgroup == 1 then
                KZVars.a_b_force_info[attacker] = {
                    body_yaw = -ui.get(ref.body_yaw[2])
                }
            end
        end
    end
end)

client.set_event_callback("shutdown", function()
    show_origin(true)
end)

client.set_event_callback("console_input", function(text)
    if text == "show1" then
        if KZVars.should_show then
            KZVars.should_show = false
        else
            KZVars.should_show = true
        end
    end
end)
