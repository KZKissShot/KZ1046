local KZRef = {
    target = ui.reference("RAGE", "Aimbot", "Target selection"),
    hit_box = ui.reference("RAGE", "Aimbot", "Target hitbox"),
    mt = { ui.reference("RAGE", "Aimbot", "Multi-point") },
    mt_scale = ui.reference("RAGE", "Aimbot", "Multi-point scale"),
    prefer_safe_point = ui.reference("RAGE", "Aimbot", "Prefer safe point"),
    avoid_hit_box = ui.reference("RAGE", "Aimbot", "Avoid unsafe hitboxes"),
    hit_chance = ui.reference("RAGE", "Aimbot", "Minimum hit chance"),
    min_damage = ui.reference("RAGE", "Aimbot", "Minimum damage"),
    auto_scope = ui.reference("RAGE", "Aimbot", "Automatic scope"),
    boost = ui.reference("RAGE", "Other", "Accuracy boost"),
    delay_shot = ui.reference("RAGE", "Other", "Delay shot"),
    stop = ui.reference("RAGE", "Other", "Quick stop"),
    stop_options = ui.reference("RAGE", "Other", "Quick stop options"),
    force_body_aim_peek = ui.reference("RAGE", "Other", "Force body aim on peek"),
    prefer_body_aim = ui.reference("RAGE", "Other", "Prefer body aim"),
    prefer_body_aim_disables = ui.reference("RAGE", "Other", "Prefer body aim disablers"),
    dt = { ui.reference("RAGE", "Other", "Double tap") },
    dt_mode = ui.reference("RAGE", "Other", "Double tap mode"),
    dt_hit_chance = ui.reference("RAGE", "Other", "Double tap hit chance"),
    dt_fake_lag_limit = ui.reference("RAGE", "Other", "Double tap fake lag limit"),
    dt_stop = ui.reference("RAGE", "Other", "Double tap quick stop"),
}

local KZMenus = {}
local KZVars = {
    config_weapon_type = 1,
    min_damage_override = "",
    hit_box_override = "",
    mt_override = "",
    mts_override = "",
    hc_override = "",
    should_show = false,
    get_kz_weapon_index = function()
    end,
    enemies_visible = function()
        local function enemy_visible(idx)
            for i = 0, 18 do
                local cx, cy, cz = entity.hitbox_position(idx, i)

                if client.visible(cx, cy, cz) then
                    return true
                end
            end
            return false
        end

        local enemies_visible = false
        for _, idx in pairs(entity.get_players(true)) do
            if enemy_visible(idx) then
                enemies_visible = true
            end
        end

        return enemies_visible
    end
}

local local_player = {
    enemies_visible = function()
        local function enemy_visible(idx)
            for i = 0, 18 do
                local cx, cy, cz = entity.hitbox_position(idx, i)

                if client.visible(cx, cy, cz) then
                    return true
                end
            end
            return false
        end

        local enemies_visible = false
        for _, idx in pairs(entity.get_players(true)) do
            if enemy_visible(idx) then
                enemies_visible = true
            end
        end

        return enemies_visible
    end,
    is_dt_enabled = function()
        return ui.get(KZRef.dt[1]) and ui.get(KZRef.dt[2])
    end,
    in_air = function()
        return false
    end,
    is_idle = function()
        return false
    end,
    is_no_scope = function()
        return entity.get_prop(entity.get_local_player(), "m_bIsScoped") == 0
    end
}

local function check_state(value, onkey)
    local state = ""
    if value == "Visible" then
        if local_player.enemies_visible() then
            state = "Visible"
        end
    elseif value == "Wall" then
        if local_player.enemies_visible() == false then
            state = "Wall"
        end
    elseif value == "Idle" then
        if local_player.is_idle() then
            state = "Idle"
        end
    elseif value == "Move" then
        if local_player.is_idle() == false then
            state = "Move"
        end
    elseif value == "DT" then
        if local_player.is_dt_enabled() then
            state = "DT"
        end
    elseif value == "No-scope" then
        if local_player.is_no_scope() then
            state = "No-scope"
        end
    elseif value == "In-air" then
        if local_player.in_air() then
            state = "In-air"
        end
    elseif value == "On-key" then
        if ui.get(onkey) then
            state = "On-key"
        end
    end

    return state
end

local kz_weapon_types = { "Global", "Taser", "D_eagle", "Pistol", "Auto", "Scout", "AWP", "Rifle", "SMG", "Shotgun", "R8" }
local hit_box_types = { "Idle", "Move", "DT", "No-scope", "In-air", "On-key" }
local mt_types = { "DT" }
local mt_scale_types = { "Visible", "Wall", "Idle", "Move", "DT", "No-scope", "In-air", "On-key" }
local hit_chance_types = { "Visible", "Wall", "Idle", "Move", "No-scope", "In-air" }
local min_damage_types = { "Visible", "Wall", "Idle", "Move", "DT", "No-scope", "In-air", "On-key" }

local weapon_selection = ui.new_combobox("LUA", "A", "[KZ Weapon] selection", kz_weapon_types)
local on_key_hit_box = ui.new_hotkey("LUA", "A", "[KZ Weapon] On-key hit box")
local on_key_mt_scale = ui.new_hotkey("LUA", "A", "[KZ Weapon] On-key multi-point scale")
local on_key_min_damage = ui.new_hotkey("LUA", "A", "[KZ Weapon] On-key min damage")

for kz_weapon_index, kz_weapon_type in pairs(kz_weapon_types) do
    KZMenus[kz_weapon_index] = {}

    KZMenus[kz_weapon_index]["enable"] = ui.new_checkbox("LUA", "A", "[" .. kz_weapon_type .. "] Enable")
    KZMenus[kz_weapon_index]["target"] = ui.new_combobox("LUA", "A", "[" .. kz_weapon_type .. "] Target selection", { "Cycle", "Cycle (2x)", "Near crosshair", "Highest damage", "Lowest ping", "Best K/D ratio", "Best hit chance" })
    KZMenus[kz_weapon_index]["hit_box"] = ui.new_multiselect("LUA", "A", "[" .. kz_weapon_type .. "] Hit box", { "Head", "Chest", "Stomach", "Arms", "Legs", "Feet" })
    KZMenus[kz_weapon_index]["mt"] = ui.new_multiselect("LUA", "A", "[" .. kz_weapon_type .. "] Multi-point", { "Head", "Chest", "Stomach", "Arms", "Legs", "Feet" })
    KZMenus[kz_weapon_index]["mt_mode"] = ui.new_combobox("LUA", "A", "\n[" .. kz_weapon_type .. "] Multi-mode mode", { "Low", "Medium", "High" })
    KZMenus[kz_weapon_index]["mt_scale"] = ui.new_slider("LUA", "A", "[" .. kz_weapon_type .. "] Multi-point scale", 24, 100, 60, true, "%", 1, { [24] = "Auto" })
    KZMenus[kz_weapon_index]["prefer_safe_point"] = ui.new_checkbox("LUA", "A", "[" .. kz_weapon_type .. "] Prefer safe point")
    KZMenus[kz_weapon_index]["unsafe_hit_boxes"] = ui.new_multiselect("LUA", "A", "[" .. kz_weapon_type .. "] Avoid unsafe hit boxes", { "Head", "Chest", "Stomach", "Arms", "Legs" })
    KZMenus[kz_weapon_index]["hit_chance"] = ui.new_slider("LUA", "A", "[" .. kz_weapon_type .. "] Hit chance", 0, 126, 20, true, "", 1, { [0] = "Auto" })
    KZMenus[kz_weapon_index]["auto_scope"] = ui.new_checkbox("LUA", "A", "[" .. kz_weapon_type .. "] Automatic scope")
    KZMenus[kz_weapon_index]["min_damage"] = ui.new_slider("LUA", "A", "[" .. kz_weapon_type .. "] Min damage", 0, 126, 20, true, "", 1, { [0] = "Auto" })
    KZMenus[kz_weapon_index]["delay_shot"] = ui.new_checkbox("LUA", "A", "[" .. kz_weapon_type .. "] Delay shot")
    KZMenus[kz_weapon_index]["stop"] = ui.new_checkbox("LUA", "A", "[" .. kz_weapon_type .. "] Quick stop")
    KZMenus[kz_weapon_index]["stop_options"] = ui.new_multiselect("LUA", "A", "[" .. kz_weapon_type .. "] Quick stop options", { "Early", "Slow motion", "Duck", "Fake duck", "Move between shots", "Ignore molotov", "Taser" })
    KZMenus[kz_weapon_index]["prefer_body_aim"] = ui.new_checkbox("LUA", "A", "[" .. kz_weapon_type .. "] Prefer body aim")
    KZMenus[kz_weapon_index]["prefer_body_aim_disables"] = ui.new_multiselect("LUA", "A", "[" .. kz_weapon_type .. "] Prefer body aim disables", { "Low inaccuracy", "Target shot fired", "Target resolved", "Safe point headshot", "Low damage" })
    KZMenus[kz_weapon_index]["force_body_aim_peek"] = ui.new_checkbox("LUA", "A", "[" .. kz_weapon_type .. "] Force body aim on peek")
    KZMenus[kz_weapon_index]["force_body_aim_hp_under"] = ui.new_slider("LUA", "A", "[" .. kz_weapon_type .. "] Force body aim HP under", 0, 100, 0, true, "", 1, { [0] = "Off" })
    KZMenus[kz_weapon_index]["dt"] = ui.new_checkbox("LUA", "A", "[" .. kz_weapon_type .. "] Double tap")
    KZMenus[kz_weapon_index]["dt_mode"] = ui.new_combobox("LUA", "A", "[" .. kz_weapon_type .. "] Double tap mode", { "Offensive", "Defensive", "KZ Adaptive" })
    KZMenus[kz_weapon_index]["dt_hit_chance"] = ui.new_slider("LUA", "A", "[" .. kz_weapon_type .. "] Double tap hit chance", 0, 100, 0, true, "%")
    KZMenus[kz_weapon_index]["dt_fake_lag_limit"] = ui.new_slider("LUA", "A", "[" .. kz_weapon_type .. "] Double tap fake lag limit", 1, 10, 1, true)
    KZMenus[kz_weapon_index]["dt_quick_stop"] = ui.new_multiselect("LUA", "A", "[" .. kz_weapon_type .. "] Double tap quick stop", { "Slow motion", "Duck", "Move between shots" })

    KZMenus[kz_weapon_index]["hit_box_overrides_num"] = ui.new_slider("LUA", "B", "[KZ Overrides: " .. kz_weapon_type .. "] Hit box", 0, #hit_box_types, 0, true, "", 1, { [0] = "Off" })
    KZMenus[kz_weapon_index]["hit_box_overrides"] = {}
    for override_index = 1, #hit_box_types do
        KZMenus[kz_weapon_index]["hit_box_overrides"][override_index] = {
            type = ui.new_combobox("LUA", "B", "[" .. kz_weapon_type .. "] Level " .. override_index .. " hit box type", hit_box_types),
            hit_box = ui.new_multiselect("LUA", "B", "[" .. kz_weapon_type .. "] Level " .. override_index .. " hit box", { "Head", "Chest", "Stomach", "Arms", "Legs", "Feet" })
        }
    end

    KZMenus[kz_weapon_index]["mt_overrides_num"] = ui.new_slider("LUA", "B", "[KZ Overrides: " .. kz_weapon_type .. "] Multi-point", 0, #mt_types, 0, true, "", 1, { [0] = "Off" })
    KZMenus[kz_weapon_index]["mt_overrides"] = {}
    for override_index = 1, #mt_types do
        KZMenus[kz_weapon_index]["mt_overrides"][override_index] = {
            type = ui.new_combobox("LUA", "B", "[" .. kz_weapon_type .. "] Level " .. override_index .. " Multi-point type", mt_types),
            multi_point = ui.new_multiselect("LUA", "B", "[" .. kz_weapon_type .. "] Level " .. override_index .. " Multi-point", { "Head", "Chest", "Stomach", "Arms", "Legs", "Feet" })
        }
    end

    KZMenus[kz_weapon_index]["mt_scale_overrides_num"] = ui.new_slider("LUA", "B", "[KZ Overrides: " .. kz_weapon_type .. "] Multi-point scale", 0, #mt_scale_types, 0, true, "", 1, { [0] = "Off" })
    KZMenus[kz_weapon_index]["mt_scale_overrides"] = {}
    for override_index = 1, #mt_scale_types do
        KZMenus[kz_weapon_index]["mt_scale_overrides"][override_index] = {
            type = ui.new_combobox("LUA", "B", "[" .. kz_weapon_type .. "] Level " .. override_index .. " Multi-point scale type", mt_scale_types),
            multi_point_scale = ui.new_slider("LUA", "B", "[" .. kz_weapon_type .. "] Level " .. override_index .. " Multi-point scale", 24, 100, 60, true, "%", 1, { [24] = "Auto" })
        }
    end

    KZMenus[kz_weapon_index]["hit_chance_overrides_num"] = ui.new_slider("LUA", "B", "[KZ Overrides: " .. kz_weapon_type .. "] Hit chance", 0, #hit_chance_types, 0, true, "", 1, { [0] = "Off" })
    KZMenus[kz_weapon_index]["hit_chance_overrides"] = {}
    for override_index = 1, #hit_chance_types do
        KZMenus[kz_weapon_index]["hit_chance_overrides"][override_index] = {
            type = ui.new_combobox("LUA", "B", "[" .. kz_weapon_type .. "] Level " .. override_index .. " hit chance type", hit_chance_types),
            hit_chance = ui.new_slider("LUA", "B", "[" .. kz_weapon_type .. "] Level " .. override_index .. " hit chance", 0, 100, 60, true, "%", 1, { [0] = "Off" })
        }
    end

    KZMenus[kz_weapon_index]["min_damage_overrides_num"] = ui.new_slider("LUA", "B", "[KZ Overrides: " .. kz_weapon_type .. "] Min damage", 0, #min_damage_types, 0, true, "", 1, { [0] = "Off" })
    KZMenus[kz_weapon_index]["min_damage_overrides"] = {}
    for override_index = 1, #min_damage_types do
        KZMenus[kz_weapon_index]["min_damage_overrides"][override_index] = {
            type = ui.new_combobox("LUA", "B", "[" .. kz_weapon_type .. "] Level " .. override_index .. " min damage type", min_damage_types),
            damage = ui.new_slider("LUA", "B", "[" .. kz_weapon_type .. "] Level " .. override_index .. " min damage", 0, 126, 20, true, "", 1, { [0] = "Auto" })
        }
    end
end

local function handle_menu()
    for i = 1, #kz_weapon_types do
        local show = ui.get(weapon_selection) == kz_weapon_types[i]

        ui.set_visible(KZMenus[i].enable, show and i ~= 1)

        if i ~= 1 then
            show = show and ui.get(KZMenus[i].enable)
        end

        ui.set_visible(KZMenus[i].target, show)
        ui.set_visible(KZMenus[i].hit_box, show)
        ui.set_visible(KZMenus[i].mt, show)
        ui.set_visible(KZMenus[i].mt_mode, show)
        ui.set_visible(KZMenus[i].mt_scale, show)
        ui.set_visible(KZMenus[i].prefer_safe_point, show)
        ui.set_visible(KZMenus[i].unsafe_hit_boxes, show)
        ui.set_visible(KZMenus[i].hit_chance, show)
        ui.set_visible(KZMenus[i].auto_scope, show)
        ui.set_visible(KZMenus[i].min_damage, show)
        ui.set_visible(KZMenus[i].delay_shot, show)
        ui.set_visible(KZMenus[i].stop, show)
        ui.set_visible(KZMenus[i].stop_options, show)
        ui.set_visible(KZMenus[i].prefer_body_aim, show)
        ui.set_visible(KZMenus[i].prefer_body_aim_disables, show)
        ui.set_visible(KZMenus[i].force_body_aim_peek, show)
        ui.set_visible(KZMenus[i].force_body_aim_hp_under, show)
        ui.set_visible(KZMenus[i].dt, show)
        ui.set_visible(KZMenus[i].dt_mode, show and ui.get(KZMenus[i].dt))
        ui.set_visible(KZMenus[i].dt_hit_chance, show and ui.get(KZMenus[i].dt))
        ui.set_visible(KZMenus[i].dt_fake_lag_limit, show and ui.get(KZMenus[i].dt))
        ui.set_visible(KZMenus[i].dt_quick_stop, show and ui.get(KZMenus[i].dt))

        ui.set_visible(KZMenus[i].hit_box_overrides_num, show)
        for override_index = 1, #hit_box_types do
            ui.set_visible(KZMenus[i].hit_box_overrides[override_index].type, show and ui.get(KZMenus[i].hit_box_overrides_num) >= override_index)
            ui.set_visible(KZMenus[i].hit_box_overrides[override_index].hit_box, show and ui.get(KZMenus[i].hit_box_overrides_num) >= override_index)
        end
        ui.set_visible(KZMenus[i].mt_overrides_num, show)
        for override_index = 1, #mt_types do
            ui.set_visible(KZMenus[i].mt_overrides[override_index].type, show and ui.get(KZMenus[i].mt_overrides_num) >= override_index)
            ui.set_visible(KZMenus[i].mt_overrides[override_index].multi_point, show and ui.get(KZMenus[i].mt_overrides_num) >= override_index)
        end
        ui.set_visible(KZMenus[i].mt_scale_overrides_num, show)
        for override_index = 1, #mt_scale_types do
            ui.set_visible(KZMenus[i].mt_scale_overrides[override_index].type, show and ui.get(KZMenus[i].mt_scale_overrides_num) >= override_index)
            ui.set_visible(KZMenus[i].mt_scale_overrides[override_index].multi_point_scale, show and ui.get(KZMenus[i].mt_scale_overrides_num) >= override_index)
        end
        ui.set_visible(KZMenus[i].hit_chance_overrides_num, show)
        for override_index = 1, #hit_chance_types do
            ui.set_visible(KZMenus[i].hit_chance_overrides[override_index].type, show and ui.get(KZMenus[i].hit_chance_overrides_num) >= override_index)
            ui.set_visible(KZMenus[i].hit_chance_overrides[override_index].hit_chance, show and ui.get(KZMenus[i].hit_chance_overrides_num) >= override_index)
        end
        ui.set_visible(KZMenus[i].min_damage_overrides_num, show)
        for override_index = 1, #min_damage_types do
            ui.set_visible(KZMenus[i].min_damage_overrides[override_index].type, show and ui.get(KZMenus[i].min_damage_overrides_num) >= override_index)
            ui.set_visible(KZMenus[i].min_damage_overrides[override_index].damage, show and ui.get(KZMenus[i].min_damage_overrides_num) >= override_index)
        end
    end
end

client.set_event_callback("paint_ui", handle_menu)

local set_config = {
    hit_box = function()
        local hit_box = ui.get(KZMenus[KZVars.get_kz_weapon_index()].hit_box)

        local override_index = 0
        for i = 1, ui.get(KZMenus[KZVars.get_kz_weapon_index()].hit_box_overrides_num) do
            local hit_box_type = ui.get(KZMenus[KZVars.get_kz_weapon_index()].hit_box_overrides[i].type)
            if check_state(hit_box_type, on_key_hit_box) ~= "" then
                override_index = i
            end
        end

        if override_index ~= 0 then
            hit_box = ui.get(KZMenus[KZVars.get_kz_weapon_index()].hit_box_overrides[override_index].hit_box)
            KZVars.hit_box_override = hit_box_types[override_index]
        end

        ui.set(KZRef.hit_box, #hit_box <= 0 and { "Head" } or hit_box)
    end,
    mt = function()
        local mt = ui.get(KZMenus[KZVars.get_kz_weapon_index()].mt)

        local override_index = 0
        for i = 1, ui.get(KZMenus[KZVars.get_kz_weapon_index()].mt_overrides_num) do
            local mt_type = ui.get(KZMenus[KZVars.get_kz_weapon_index()].mt_overrides[i].type)
            if check_state(mt_type, on_key_hit_box) ~= "" then
                override_index = i
            end
        end

        if override_index ~= 0 then
            mt = ui.get(KZMenus[KZVars.get_kz_weapon_index()].mt_overrides[override_index].multi_point)
            KZVars.mt_override = mt_types[override_index]
        end

        ui.set(KZRef.mt[1], #mt <= 0 and { "Head" } or mt)
    end,
    multi_point_scale = function()
        local multi_point_scale = ui.get(KZMenus[KZVars.get_kz_weapon_index()].mt_scale)

        local override_index = 0
        for i = 1, ui.get(KZMenus[KZVars.get_kz_weapon_index()].mt_scale_overrides_num) do
            local mt_scale_type = ui.get(KZMenus[KZVars.get_kz_weapon_index()].mt_scale_overrides[i].type)
            if check_state(mt_scale_type, on_key_mt_scale) ~= "" then
                override_index = i
            end
        end

        if override_index ~= 0 then
            multi_point_scale = ui.get(KZMenus[KZVars.get_kz_weapon_index()].mt_scale_overrides[override_index].multi_point_scale)
            KZVars.mts_override = mt_scale_types[override_index]
        end

        ui.set(KZRef.mt_scale, multi_point_scale)
    end,
    hit_chance = function()
        local hit_chance = ui.get(KZMenus[KZVars.get_kz_weapon_index()].hit_chance)

        local override_index = 0
        for i = 1, ui.get(KZMenus[KZVars.get_kz_weapon_index()].hit_chance_overrides_num) do
            local hit_chance_type = ui.get(KZMenus[KZVars.get_kz_weapon_index()].hit_chance_overrides[i].type)
            if check_state(hit_chance_type, on_key_hit_chance) ~= "" then
                override_index = i
            end
        end

        if override_index ~= 0 then
            hit_chance = ui.get(KZMenus[KZVars.get_kz_weapon_index()].hit_chance_overrides[override_index].hit_chance)
            KZVars.hc_override = hit_chance_types[override_index]
        end

        ui.set(KZRef.hit_chance, hit_chance)
    end,
    min_damage = function()
        local min_damage = ui.get(KZMenus[KZVars.get_kz_weapon_index()].min_damage)

        local override_index = 0
        for i = 1, ui.get(KZMenus[KZVars.get_kz_weapon_index()].min_damage_overrides_num) do
            local min_damage_type = ui.get(KZMenus[KZVars.get_kz_weapon_index()].min_damage_overrides[i].type)
            if check_state(min_damage_type, on_key_min_damage) ~= "" then
                override_index = i
            end
        end

        if override_index ~= 0 then
            min_damage = ui.get(KZMenus[KZVars.get_kz_weapon_index()].min_damage_overrides[override_index].damage)
            KZVars.min_damage_override = min_damage_types[override_index]
        end

        ui.set(KZRef.min_damage, min_damage)
    end,
    dt = function()
        ui.set(KZRef.dt[1], ui.get(KZMenus[KZVars.get_kz_weapon_index()].dt))
        local dt_mode
        if ui.get(KZMenus[KZVars.get_kz_weapon_index()].dt_mode) == "KZ Adaptive" then
            dt_mode = local_player.is_idle() and "Defensive" or "Offensive"
        else
            dt_mode = ui.get(KZMenus[KZVars.get_kz_weapon_index()].dt_mode)
        end

        local dt_ht = ui.get(KZMenus[KZVars.get_kz_weapon_index()].dt_hit_chance)

        if ui.get(KZMenus[KZVars.get_kz_weapon_index()].dt_mode) == "KZ Adaptive" then
            local function distance3D(A, B)
                return math.sqrt((A[1] - B[1]) ^ 2 - (A[2] - B[2]) ^ 2 - (A[3] - B[3]) ^ 2)
            end

            if entity.is_alive(entity.get_local_player()) then
                local l = { entity.get_origin(entity.get_local_player()) }

                local function get_nearest_enemy()
                    local closetDist = 9999999
                    local closetIndex = -1

                    local enemies = entity.get_players(true)
                    for i = 1, #enemies do
                        if enemies[i] ~= nil and entity.is_alive(enemies[i]) then
                            local dist = distance3D(l, { entity.get_origin(enemies[i]) })
                            if dist < closetDist then
                                closetDist = dist
                                closetIndex = i
                            end
                        end
                    end

                    return enemies[closetIndex]
                end

                local target = get_nearest_enemy()

                if target ~= nil and entity.is_alive(target) then

                    local dist = distance3D({ entity.get_origin(target) }, l)

                    if dist < 400 then
                        dt_ht = 1
                    elseif dist > 400 then
                        dt_ht = 10
                    elseif dist > 800 then
                        dt_ht = 15
                    end
                end
            end
        end

        ui.set(KZRef.dt_mode, dt_mode)
        ui.set(KZRef.dt_hit_chance, dt_ht)
        ui.set(KZRef.dt_fake_lag_limit, ui.get(KZMenus[KZVars.get_kz_weapon_index()].dt_fake_lag_limit))
        ui.set(KZRef.dt_stop, ui.get(KZMenus[KZVars.get_kz_weapon_index()].dt_quick_stop))
    end,
}

client.set_event_callback("setup_command", function(cmd)
    local_player.in_air = function()
        local on_ground = bit.band(entity.get_prop(entity.get_local_player(), "m_fFlags"), 1) == 1 and cmd.in_jump == 0
        return not on_ground
    end

    local_player.is_idle = function()
        if cmd.forwardmove == 0 and cmd.sidemove == 0 then
            return true;
        else
            return false;
        end
    end

    KZVars.get_kz_weapon_index = function()
        local weapon = entity.get_player_weapon(entity.get_local_player())
        local weapon_id = bit.band(entity.get_prop(weapon, "m_iItemDefinitionIndex"), 0xFFFF)
        local weapon_idx = { [1] = 3, [0] = 1, [2] = 4, [3] = 4, [4] = 4, [7] = 8, [8] = 8, [9] = 7, [10] = 8, [11] = 5, [13] = 8, [14] = 8, [16] = 8, [17] = 9, [19] = 9, [23] = 9, [24] = 9, [25] = 10, [26] = 9, [27] = 10, [28] = 8, [29] = 10, [30] = 4, [31] = 2, [32] = 4, [33] = 9, [34] = 9, [35] = 10, [36] = 4, [38] = 5, [39] = 8, [40] = 6, [60] = 8, [61] = 4, [63] = 4, [64] = 11 }
        if weapon_idx[weapon_id] ~= nil and ui.get(KZMenus[weapon_idx[weapon_id]].enable) then
            return weapon_idx[weapon_id]
        end
        return 1
    end

    ui.set(KZRef.target, ui.get(KZMenus[KZVars.get_kz_weapon_index()].target))
    set_config.hit_box()
    set_config.mt()
    set_config.multi_point_scale()
    ui.set(KZRef.mt[3], ui.get(KZMenus[KZVars.get_kz_weapon_index()].mt_mode))
    ui.set(KZRef.prefer_safe_point, ui.get(KZMenus[KZVars.get_kz_weapon_index()].prefer_safe_point))
    ui.set(KZRef.avoid_hit_box, ui.get(KZMenus[KZVars.get_kz_weapon_index()].unsafe_hit_boxes))
    set_config.hit_chance()
    ui.set(KZRef.auto_scope, ui.get(KZMenus[KZVars.get_kz_weapon_index()].auto_scope))
    set_config.min_damage()
    ui.set(KZRef.delay_shot, ui.get(KZMenus[KZVars.get_kz_weapon_index()].delay_shot))
    ui.set(KZRef.stop, ui.get(KZMenus[KZVars.get_kz_weapon_index()].stop))
    ui.set(KZRef.stop_options, ui.get(KZMenus[KZVars.get_kz_weapon_index()].stop_options))
    ui.set(KZRef.prefer_body_aim, ui.get(KZMenus[KZVars.get_kz_weapon_index()].prefer_body_aim))
    ui.set(KZRef.prefer_body_aim_disables, ui.get(KZMenus[KZVars.get_kz_weapon_index()].prefer_body_aim_disables))
    ui.set(KZRef.force_body_aim_peek, ui.get(KZMenus[KZVars.get_kz_weapon_index()].force_body_aim_peek))
    set_config.dt()

    for _, idx in pairs(entity.get_players(true)) do
        if entity.get_prop(idx, "m_iHealth") < ui.get(KZMenus[KZVars.get_kz_weapon_index()].force_body_aim_hp_under) then
            plist.set(idx, "Override prefer body aim", "Force")
        else
            plist.set(idx, "Override prefer body aim", "-")
        end
    end
end)

client.set_event_callback("paint", function(cmd)
    local sx, sy = client.screen_size()
    local cx, cy = sx / 2, sy / 2

    renderer.text(cx + 50, cy + 50, 255, 255, 255, 255, "cbl", 0, "Min damage: " .. tostring(ui.get(KZRef.min_damage)))
end)
